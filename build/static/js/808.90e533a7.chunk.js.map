{"version":3,"file":"static/js/808.90e533a7.chunk.js","mappings":"4MACA,EAAuB,wB,SCkBvB,EAhBkB,SAACA,GAClB,OACCC,EAAAA,EAAAA,MAAA,MAAIC,UAAWC,EAAaC,SAAA,EAC3BH,EAAAA,EAAAA,MAAA,UAAAG,SAAA,EACCC,EAAAA,EAAAA,KAAA,cAAAD,UACCC,EAAAA,EAAAA,KAAA,KAAAD,SAAIJ,EAAMM,UAEXD,EAAAA,EAAAA,KAAA,cAAAD,SAAaJ,EAAMO,aAEpBF,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACN,UAAU,MAAMO,GAAE,WAAAC,OAAaV,EAAMW,IAAKP,SAAC,sBAKpD,EChBA,EAAuB,wBAAvB,EAAyD,2BCwDzD,EAzCkB,SAACJ,GAClB,IAXmBY,EAAQC,EAWrBC,GAAUC,EAAAA,EAAAA,MACVC,GAAWC,EAAAA,EAAAA,MAKXC,EAAiD,QAFnC,IAAIC,gBAAgBH,EAASI,QAEVC,IAAI,QAWrCC,GA5BaV,EA4BaZ,EAAMY,OA5BXC,EA4BmBK,EA3BvCN,EAAOW,MAAK,SAACC,EAAQC,GAC3B,OAAIZ,EACIW,EAAOb,GAAKc,EAAOd,GAAK,GAAK,EAE7Ba,EAAOb,GAAKc,EAAOd,GAAK,GAAK,CAEtC,KAuBA,OACCV,EAAAA,EAAAA,MAACyB,EAAAA,SAAQ,CAAAtB,SAAA,EACRC,EAAAA,EAAAA,KAAA,OAAKH,UAAWC,EAAgBC,UAC/BH,EAAAA,EAAAA,MAAA,UAAQ0B,QAde,WAEzBb,EAAQc,KAAK,CACZC,SAAUb,EAASa,SACnBT,OAAO,SAADV,OAAYQ,EAAqB,OAAS,QAGlD,EAOsCd,SAAA,CAAC,QAC7Bc,EAAqB,aAAe,kBAG5Cb,EAAAA,EAAAA,KAAA,MAAIH,UAAWC,EAAaC,SAC1BkB,EAAaQ,KAAI,SAACC,GAAK,OACvB1B,EAAAA,EAAAA,KAAC2B,EAAS,CAETrB,GAAIoB,EAAMpB,GACVJ,OAAQwB,EAAMxB,OACdD,KAAMyB,EAAMzB,MAHPyB,EAAMpB,GAIV,QAKP,E,2BCtDA,EAA2B,gCCa3B,EAXsB,WACpB,OACEV,EAAAA,EAAAA,MAAA,OAAKC,UAAWC,EAAiBC,SAAA,EAC/BC,EAAAA,EAAAA,KAAA,KAAAD,SAAG,sBACHC,EAAAA,EAAAA,KAACG,EAAAA,GAAI,CAACN,UAAU,MAAMO,GAAG,aAAYL,SAAC,kBAK5C,EC2BA,EA/BkB,WACjB,IAAA6B,GAKIC,EAAAA,EAAAA,GAAQC,EAAAA,IAAc,GAJzBC,EAAWH,EAAXG,YACAC,EAAMJ,EAANI,OACMC,EAAYL,EAAlBM,KACAC,EAAKP,EAALO,MAOD,OAJAC,EAAAA,EAAAA,YAAU,WACTL,GACD,GAAG,CAACA,IAEW,YAAXC,GAEFhC,EAAAA,EAAAA,KAAA,OAAKH,UAAU,WAAUE,UACxBC,EAAAA,EAAAA,KAACqC,EAAAA,EAAc,MAKdF,GACInC,EAAAA,EAAAA,KAAA,KAAGH,UAAU,mBAAkBE,SAAEoC,IAG1B,cAAXH,GAA4BC,GAAwC,IAAxBA,EAAaK,QAItDtC,EAAAA,EAAAA,KAACuC,EAAS,CAAChC,OAAQ0B,KAHlBjC,EAAAA,EAAAA,KAACwC,EAAa,GAIvB,C","sources":["webpack://react-complete-guide/./src/components/quotes/QuoteItem.module.css?127c","components/quotes/QuoteItem.js","webpack://react-complete-guide/./src/components/quotes/QuoteList.module.css?9d5d","components/quotes/QuoteList.js","webpack://react-complete-guide/./src/components/quotes/NoQuotesFound.module.css?2c4b","components/quotes/NoQuotesFound.js","pages/AllQuotes.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"item\":\"QuoteItem_item__utNo5\"};","import { Link } from 'react-router-dom'\nimport classes from './QuoteItem.module.css'\n\nconst QuoteItem = (props) => {\n\treturn (\n\t\t<li className={classes.item}>\n\t\t\t<figure>\n\t\t\t\t<blockquote>\n\t\t\t\t\t<p>{props.text}</p>\n\t\t\t\t</blockquote>\n\t\t\t\t<figcaption>{props.author}</figcaption>\n\t\t\t</figure>\n\t\t\t<Link className=\"btn\" to={`/quotes/${props.id}`}>\n\t\t\t\tView Fullscreen\n\t\t\t</Link>\n\t\t</li>\n\t)\n}\n\nexport default QuoteItem\n","// extracted by mini-css-extract-plugin\nexport default {\"list\":\"QuoteList_list__Rz5fN\",\"sorting\":\"QuoteList_sorting__TB+pO\"};","import { Fragment } from 'react'\nimport { useHistory, useLocation } from 'react-router-dom'\n\nimport QuoteItem from './QuoteItem'\nimport classes from './QuoteList.module.css'\n\nconst sortQuotes = (quotes, ascending) => {\n\treturn quotes.sort((quoteA, quoteB) => {\n\t\tif (ascending) {\n\t\t\treturn quoteA.id > quoteB.id ? 1 : -1\n\t\t} else {\n\t\t\treturn quoteA.id < quoteB.id ? 1 : -1\n\t\t}\n\t})\n}\n\nconst QuoteList = (props) => {\n\tconst history = useHistory()\n\tconst location = useLocation()\n\n\t// it is built in browser\n\tconst queryParams = new URLSearchParams(location.search)\n\n\tconst isSortingAscending = queryParams.get('sort') === 'asc'\n\n\tconst changeSortHandler = () => {\n\t\t//both are ok but this is for more complex paths\n\t\thistory.push({\n\t\t\tpathname: location.pathname,\n\t\t\tsearch: `?sort=${(isSortingAscending ? 'desc' : 'asc')}`\n\t\t})\n\t\t// history.push(`/${location.pathname}?sort=` + (isSortingAscending ? 'desc' : 'asc'))\n\t}\n\n\tconst sortedQuotes = sortQuotes(props.quotes, isSortingAscending)\n\n\treturn (\n\t\t<Fragment>\n\t\t\t<div className={classes.sorting}>\n\t\t\t\t<button onClick={changeSortHandler}>\n\t\t\t\t\tSort {isSortingAscending ? 'Descending' : 'Ascending'}\n\t\t\t\t</button>\n\t\t\t</div>\n\t\t\t<ul className={classes.list}>\n\t\t\t\t{sortedQuotes.map((quote) => (\n\t\t\t\t\t<QuoteItem\n\t\t\t\t\t\tkey={quote.id}\n\t\t\t\t\t\tid={quote.id}\n\t\t\t\t\t\tauthor={quote.author}\n\t\t\t\t\t\ttext={quote.text}\n\t\t\t\t\t/>\n\t\t\t\t))}\n\t\t\t</ul>\n\t\t</Fragment>\n\t)\n}\n\nexport default QuoteList\n","// extracted by mini-css-extract-plugin\nexport default {\"noquotes\":\"NoQuotesFound_noquotes__3hZR9\"};","import { Link } from 'react-router-dom';\nimport classes from './NoQuotesFound.module.css';\n\nconst NoQuotesFound = () => {\n  return (\n    <div className={classes.noquotes}>\n      <p>No quotes found!</p>\n      <Link className='btn' to=\"/new-quote\">\n        Add a Quote\n      </Link>\n    </div>\n  );\n};\n\nexport default NoQuotesFound;\n","import { useEffect } from 'react'\r\nimport QuoteList from '../components/quotes/QuoteList'\r\nimport useHttp from '../hooks/use-http'\r\nimport { getAllQuotes } from '../lib/api'\r\nimport LoadingSpinner from '../components/UI/LoadingSpinner'\r\nimport NoQuotesFound from '../components/quotes/NoQuotesFound'\r\n\r\n\r\nconst AllQuotes = () => {\r\n\tconst {\r\n\t\tsendRequest,\r\n\t\tstatus,\r\n\t\tdata: loadedQuotes,\r\n\t\terror,\r\n\t} = useHttp(getAllQuotes, true)\r\n\r\n\tuseEffect(() => {\r\n\t\tsendRequest()\r\n\t}, [sendRequest])\r\n\r\n\tif (status === 'pending') {\r\n\t\treturn (\r\n\t\t\t<div className=\"centered\">\r\n\t\t\t\t<LoadingSpinner />\r\n\t\t\t</div>\r\n\t\t)\r\n\t}\r\n\r\n\tif (error) {\r\n\t\treturn <p className=\"centered focused\">{error}</p>\r\n\t}\r\n\r\n\tif (status === 'completed' && (!loadedQuotes || loadedQuotes.length === 0)) {\r\n\t\treturn <NoQuotesFound />\r\n\t}\r\n\r\n\treturn <QuoteList quotes={loadedQuotes} />\r\n}\r\n\r\nexport default AllQuotes\r\n"],"names":["props","_jsxs","className","classes","children","_jsx","text","author","Link","to","concat","id","quotes","ascending","history","useHistory","location","useLocation","isSortingAscending","URLSearchParams","search","get","sortedQuotes","sort","quoteA","quoteB","Fragment","onClick","push","pathname","map","quote","QuoteItem","_useHttp","useHttp","getAllQuotes","sendRequest","status","loadedQuotes","data","error","useEffect","LoadingSpinner","length","QuoteList","NoQuotesFound"],"sourceRoot":""}